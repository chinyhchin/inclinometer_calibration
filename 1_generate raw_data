# generate_raw_data_v2.py
import numpy as np
import csv
from datetime import datetime

def generate_test_data(temp=25.0, sample_rate=100):
    """
    Simulate raw accelerometer-like data with known distortions in 2 full rotations.
    - scales: [scale_x, scale_y, scale_z]
    - offsets: [offset_x, offset_y, offset_z]
    - cross_matrix: 3x3 matrix modeling axis misalignment (non-orthogonality)
    Returns: noisy raw data array (shape: [N, 3])
    Also writes to a CSV file named with the temperature and timestamp.
    """
    # === 1. Generate ideal motion data ===
    # First rotation (about X axis)
    theta = np.linspace(0, 4*np.pi, 200)  # Two full rotations
    x1 = np.zeros_like(theta)
    y1 = np.sin(theta)
    z1 = np.cos(theta)
    
    # Second rotation (about Y axis)
    phi = np.linspace(0, 4*np.pi, 200)
    x2 = np.sin(phi)
    y2 = np.zeros_like(phi)
    z2 = np.cos(phi)
   
    # Combine motion data
    ideal = np.vstack([
        np.column_stack([x1, y1, z1]),
        np.column_stack([x2, y2, z2])
    ]) # shape: (400, 3) acceleration in g
    
    # === 2. Apply known sensor imperfections ===
    # Add sensor imperfection error parameters
    true_b = np.array([0.001, 0.001, 0.001])  # Offset in g
    true_S = np.diag([1, 1, 1])    # Scale factors in g/g
    true_N = np.array([  # Non-orthogonality of sensor axis
        [1, 0, 0],
        [0, 1, 0],
        [0, 0, 1]
        #[1.00, 0.015, -0.010],
        #[0.005, 0.995, 0.020],
        #[-0.012, 0.008, 1.01]
    ])
    true_A = true_S @ true_N.T # Combined scale and misalignment matrix A
    true_A_1 = np.linalg.inv(true_A) # Combined correction matrix A^(-1)
    print("Scale and misalignment correction matrix:\n",true_A_1)

    # Apply sensor errors transformations
    distorted_g = (ideal @ true_A) + true_b # Distorted data in g

    # Convert to LSB unit
    sensitivity = 256000 #Scale factor of 1/256000 g/LSB
    distorted_lsb = distorted_g * sensitivity # Distorted data in LSB

    # Apply noise 
    noisy = distorted_lsb #+ np.random.normal(0, 50, distorted_lsb.shape) # noisy data in LSB
    


    # === 3. Write to CSV with temp in filename ===
    num_samples = noisy.shape[0]
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"ADXL355_rawdata_{temp:.1f}C_{timestamp}.csv"
    
    with open(filename, 'w', newline='') as f:
        writer = csv.writer(f, delimiter='\t')
        writer.writerow(['timestamp','x_lsb','y_lsb','z_lsb','temperature_C'])
        for i in range(num_samples):
            writer.writerow([
               round(i / sample_rate, 4),  # timestamp in seconds
                int(noisy[i, 0]),    
                int(noisy[i, 1]),  
                int(noisy[i, 2]),
                round(temp + np.random.normal(0, 0.1), 2)
            ])
    
    print(f"Generated {num_samples} samples at {temp}Â°C in {filename}")
    
    return noisy

if __name__ == "__main__":
    generate_test_data(temp=20.0)