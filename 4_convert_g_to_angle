import numpy as np
import csv
import matplotlib.pyplot as plt


def accel_to_angles(accel_data):
    """
    Convert calibrated accelerometer data to orientation angles.
    :param accel_data: Nx3 array of calibrated data [x, y, z] in g
    :return: Nx3 array of angles [theta (x-axis), psi (y-axis), phi (z-axis)]
    """
    accel_data = np.array(accel_data)
    angles = []

    for x, y, z in accel_data:
        theta = np.arctan2(x, np.sqrt(y**2 + z**2))   # x-axis
        psi   = np.arctan2(y, np.sqrt(x**2 + z**2))   # y-axis
        phi   = np.arctan2(np.sqrt(x**2 + y**2), z)   # z-axis
        
        angles.append([np.degrees(theta), np.degrees(psi), np.degrees(phi)])

    return np.array(angles)

# Load Calibrated Measurement Data
def load_measurements(filename):
    data = np.loadtxt(filename, 
                      delimiter='\t', 
                      skiprows=1,                  
                      usecols=(0, 1, 2))
          
    return data

# Save Angle Data
def save_angle_data(filename, data):
    np.savetxt(filename, data, delimiter='\t', fmt='%.6f', header='theta,psi,phi', comments='')

def plot_angles(angles):
    """
    Plot theta, phi, and psi angles over time.
    :param angles: Nx3 array of angles [theta, phi, psi]
    """
    theta = angles[:, 0]
    phi   = angles[:, 1]
    psi   = angles[:, 2]
    time = np.arange(len(theta))  # Assuming uniform sampling

    plt.figure(figsize=(12, 8))

    plt.subplot(3, 1, 1)
    plt.plot(time, theta, label='Theta (x-axis)', color='blue')
    plt.ylabel("Degrees")
    plt.legend()
    plt.grid(True)

    plt.subplot(3, 1, 2)
    plt.plot(time, psi, label='Psi (y-axis)', color='green')
    plt.ylabel("Degrees")
    plt.legend()
    plt.grid(True)

    plt.subplot(3, 1, 3)
    plt.plot(time, phi, label='Phi (z-axis)', color='red')
    plt.xlabel("Sample Index")
    plt.ylabel("Degrees")
    plt.legend()
    plt.grid(True)

    plt.tight_layout()
    plt.show()

# Main Workflow
if __name__ == "__main__":
    calib_g_file = 'ADXL355_rawdata_20.0C_20250519_085329_calibrated.csv'
    output_angle_file = 'ADXL355_rawdata_20.0C_20250519_085329_angle.csv'

    g_data = load_measurements(calib_g_file)
    angle = accel_to_angles(g_data)
    save_angle_data(output_angle_file, angle)

    print("Angle conversion applied and saved to:", output_angle_file)
    plot_angles(angle)